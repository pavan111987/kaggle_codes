import csv
from keras.models import Model
import numpy as np
import scipy.spatial.distance as d
from keras.models import Sequential
from keras.layers import Dense,LSTM
from keras.models import model_from_json
import re
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.utils.np_utils import to_categorical
from keras.layers import Dense, Input, Flatten
from keras.layers import Conv1D, MaxPooling1D, Embedding
import sys


json_file = open('senti_encoder.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("senti_encoder.h5")


print("Loaded model from disk")

1-d.cosine(loaded_model.predict(np.array([0.4])),loaded_model.predict(np.array([0.11])))

embeddings_index={}

f=open('C:/Users/pavankumar.buduguppa/Documents/Projects/Keras/senti.csv')
f=csv.reader(f)
senti=[]
words=[]
for i in f:
  word=(i[0])
  coefs=(loaded_model.predict(np.array([float(i[1])])))
  embeddings_index[word]=coefs
  words.append(i[0]) 
  senti.append(float(i[1]))
 


word_index={}
f=open('C:/Users/pavankumar.buduguppa/Documents/Projects/Keras/twitter final test.csv')
f=csv.reader(f)
for i in f:
  temp=(' '.join(re.sub('[^a-zA-Z0-9]',' ',i[0]).split('  '))).lower().split() 
  for j in temp:
    if (j in words):
      word_index[j]=senti[np.where(j==np.array(words))[0][0]]

    



MAX_SEQUENCE_LENGTH = 100
MAX_NB_WORDS = 2000
EMBEDDING_DIM = 32
VALIDATION_SPLIT = 0.2

texts = []  # list of text samples
labels_index = {}  # dictionary mapping label name to numeric id
labels = []  # list of label ids
l=[]
f=open('C:/Users/pavankumar.buduguppa/Documents/Projects/Keras/twitter final test.csv')
f=csv.reader(f)
for i in f:
  texts.append((' '.join(re.sub('[^a-zA-Z0-9]',' ',i[0]).split('  '))).lower())  
  l.append(i[1])


for i in l:
  labels_index[i]=np.where(i==np.unique(l))[0][0]
  labels.append(np.where(i==np.unique(l))[0][0])
 


print('Found %s texts.' % len(texts))

# finally, vectorize the text samples into a 2D integer tensor
tokenizer = Tokenizer(nb_words=MAX_NB_WORDS)
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)

word_index = tokenizer.word_index
print('Found %s unique tokens.' % len(word_index))

data = pad_sequences(sequences, maxlen=MAX_SEQUENCE_LENGTH)

labels = to_categorical(np.asarray(labels))
print('Shape of data tensor:', data.shape)
print('Shape of label tensor:', labels.shape)

# split the data into a training set and a validation set
indices = np.arange(data.shape[0])
np.random.shuffle(indices)
data = data[indices]
labels = labels[indices]
nb_validation_samples = int(VALIDATION_SPLIT * data.shape[0])

x_train = data[:-nb_validation_samples]
y_train = labels[:-nb_validation_samples]
x_val = data[-nb_validation_samples:]
y_val = labels[-nb_validation_samples:]

print('Preparing embedding matrix.')

# prepare embedding matrix
nb_words = min(MAX_NB_WORDS, len(word_index))
embedding_matrix = np.zeros((nb_words, EMBEDDING_DIM))
for word, i in word_index.items():
    if i >= MAX_NB_WORDS:
        continue
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        # words not found in embedding index will be all-zeros.
        embedding_matrix[i] = embedding_vector

# load pre-trained word embeddings into an Embedding layer
# note that we set trainable = False so as to keep the embeddings fixed
embedding_layer = Embedding(nb_words,
                            EMBEDDING_DIM,
                            weights=[embedding_matrix],
                            input_length=MAX_SEQUENCE_LENGTH,
                            trainable=False)

print('Training model.')

# train a 1D convnet with global maxpooling
sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')
embedded_sequences = embedding_layer(sequence_input)
x = Conv1D(128, 5, activation='relu')(embedded_sequences)
x = MaxPooling1D(35)(x)
x = Flatten()(x)
x = Dense(128, activation='relu')(x)
preds = Dense(len(labels_index), activation='softmax')(x)

model = Model(sequence_input, preds)
model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['acc'])

# happy learning!
model.fit(x_train, y_train, validation_data=(x_val, y_val),
          nb_epoch=2, batch_size=128)




model=Sequential()
model.add(embedding_layer)
model.add(LSTM(100))
model.add(Dense(len(labels_index),activation='sigmoid'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, validation_data=(x_val, y_val),
          nb_epoch=2, batch_size=128)

scores = model.evaluate(X_test, y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

